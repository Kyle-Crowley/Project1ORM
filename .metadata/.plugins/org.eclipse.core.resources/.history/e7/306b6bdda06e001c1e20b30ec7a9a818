package com.revature.util.metamodels;

import java.lang.reflect.Field;
import java.util.LinkedList;
import java.util.List;

import com.revature.annotations.Column;
import com.revature.annotations.Entity;

public class MetaModel<T>
{
	private Class<?> metaClass;
	private PrimaryKeyField primaryKeyField; 
	private List<ColumnField> columnFields;
	private List<ForeignKeyField> foreignKeyFields;
	
	
	
	public static MetaModel<Class<?>> of(Class<?> metaClass) 
	{
		
		// we check that the class we're passing through has the @Entity annotation
		if (metaClass.getAnnotation(Entity.class) == null) 
		{
			throw new IllegalStateException("Cannot create MetaModel object! Provided class "
					+ metaClass.getName() + " is not annotated with @Entity");
			
		}
		// if so....return a new MetaModel object of the class passed through 
		return new MetaModel<>(metaClass);
	}
	
	public MetaModel(Class<?> metaClass)
	{
		this.metaClass = metaClass;
		this.columnFields = new LinkedList<>();
		this.foreignKeyFields = new LinkedList<>();
	}
	
	public List<ColumnField> getColumns() 
	{
		// this method returns all the properties of the class that are marked with @Column annotation
		
		Field[] fields = metaClass.getDeclaredFields();
		
		// for each field within the above Field[], check if it has the Column annotation
		// if it DOES have the @Column annotation add it to the metamodels's columnFields LinkedList
		for (Field field : fields) 
		{
			
			// The column reference variable will NOT be null, if the field is annotated with @Column
			Column column = field.getAnnotation(Column.class);
			
			if (column != null) 
			{
				// if it is indeed marked with @Column, instantiate a new ColumnField object with its data
				columnFields.add(new ColumnField(field));
			}
		}
		
		// add some extra logic in the case that the class doens't have any column fields
		if (columnFields.isEmpty()) 
		{
			throw new RuntimeException("No columns found in: " + metaClass.getName());
		}
		
		return columnFields;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
