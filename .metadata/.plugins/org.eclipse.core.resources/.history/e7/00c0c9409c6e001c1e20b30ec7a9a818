package com.revature.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;

public class ClassInspector
{
	public static void inspectClass(Class<?> metaClass)
	{
		listPublicConstructors(metaClass);
		listNonPublicConstructors(metaClass);
		listPublicFields(metaClass);
		listNonPublicFields(metaClass);
		listPublicMethods(metaClass);
		listDeclaredMethods(metaClass);
	}
	
	public static void listPublicConstructors(Class<?> metaClass)
	{
		System.out.println("Printing the public constructors of the " + metaClass.getName());
		Constructor<?>[] constructors = metaClass.getConstructors();
		for (Constructor<?> constructor : constructors) 
		{
			System.out.println("\tConstructor name: " + constructor.getName());
			System.out.println("\tConstructor param types: " + Arrays.toString(constructor.getParameterTypes()) + "\n");
			System.out.println();
		}
	}
	
	public static void listNonPublicConstructors(Class<?> metaClass)
	{
		System.out.println("Printing non-visible constructors of the " + metaClass.getName());
		Constructor<?>[] constructors = metaClass.getDeclaredConstructors();
		for (Constructor<?> constructor : constructors) {
			// Parse modifier out
			if ((constructor.getModifiers() & Modifier.PUBLIC) == Modifier.PUBLIC) {
				continue;
			}
			System.out.println("\tConstructor name: " + constructor.getName());
			System.out.println("\tConstructor param types: " + Arrays.toString(constructor.getParameterTypes()) + "\n");
			System.out.println();
		}
	}
	
	public static void listPublicFields(Class<?> metaClass)
	{
		System.out.println("Printing public fields of the " + metaClass.getName());
		Field[] fields = metaClass.getFields();
		if (fields.length == 0) 
		{
			System.out.println("There are no public fields in " + metaClass.getName());
		}
		for (Field field : fields) 
		{
			System.out.println("\tField name: " + field.getName());
			System.out.println("\tField type: " + field.getType());
			System.out.println("\tIs field primitive? :: " + field.getType().isPrimitive());
			System.out.println("\tModifiers bit value: " + Integer.toBinaryString(field.getModifiers()) + "\n");
		}
	}
	
	public static void listNonPublicFields(Class<?> metaClass)
	{
		System.out.println("Printing non-public fields of the " + metaClass.getName());
		Field[] fields = metaClass.getDeclaredFields();
		if (fields.length == 0) {
			System.out.println("\nThere are no non-public fields in " + metaClass.getName());
		}
		for (Field field : fields) {
			if ((field.getModifiers() & Modifier.PUBLIC) == Modifier.PUBLIC)
				continue;
			System.out.println("\tField name: " + field.getName());
			System.out.println("\tField type: " + field.getType());
			System.out.println("\tIs field primitive?: " + field.getType().isPrimitive());
			System.out.println("\tModifiers bit value: " + Integer.toBinaryString(field.getModifiers()));
			System.out.println();
		}
	}
	
	public static void listPublicMethods(Class<?> metaClass)
	{
		
	}
	
	public static void listDeclaredMethods(Class<?> metaClass)
	{
		
	}
}
